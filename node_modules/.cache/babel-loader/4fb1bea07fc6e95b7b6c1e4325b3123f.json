{"ast":null,"code":"import { requester } from '../../infrastructure';\nimport { FETCH_ALL_LOGS_SUCCESS, FETCH_ALL_LOGS_BEGIN, FETCH_ALL_LOGS_ERROR, FINDBYUSERNAME_LOGS_SUCCESS, FINDBYUSERNAME_LOGS_BEGIN, FINDBYUSERNAME_LOGS_ERROR, CLEARBYUSERNAME_LOGS_SUCCESS, CLEARBYUSERNAME_LOGS_BEGIN, CLEARBYUSERNAME_LOGS_ERROR, CLEAR_ALL_LOGS_SUCCESS, CLEAR_ALL_LOGS_BEGIN, CLEAR_ALL_LOGS_ERROR } from './actionTypes'; // fetchAllLogs\n\nfunction fetchAllLogsSuccess(response) {\n  return {\n    type: FETCH_ALL_LOGS_SUCCESS,\n    payload: response\n  };\n}\n\nfunction fetchAllLogsBegin() {\n  return {\n    type: FETCH_ALL_LOGS_BEGIN\n  };\n}\n\nfunction fetchAllLogsError(error, message, status, path) {\n  return {\n    type: FETCH_ALL_LOGS_ERROR,\n    error: error,\n    message: message,\n    status: status,\n    path: path\n  };\n}\n\nfunction fetchAllLogsAction() {\n  return function (dispatch) {\n    dispatch(fetchAllLogsBegin());\n    return requester.get('/logs/all', function (response) {\n      if (response.error) {\n        var error = response.error,\n            message = response.message,\n            status = response.status,\n            path = response.path;\n        dispatch(fetchAllLogsError(error, message, status, path));\n      } else {\n        // dispatch(changeAllPicturesAction(timeLineUserId));\n        dispatch(fetchAllLogsSuccess(response));\n      }\n    }).catch(function (err) {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n\n      dispatch(fetchAllLogsError('', \"Error: \".concat(err.message), err.status, ''));\n    });\n  };\n}\n\n; // findByUserName\n\nfunction findByUserNameSuccess(response, search) {\n  return {\n    type: FINDBYUSERNAME_LOGS_SUCCESS,\n    payload: response,\n    message: \"Successfully loaded logs for \\\"\".concat(search, \"\\\".\")\n  };\n}\n\nfunction findByUserNameBegin() {\n  return {\n    type: FINDBYUSERNAME_LOGS_BEGIN\n  };\n}\n\nfunction findByUserNameError(error, message, status, path) {\n  return {\n    type: FINDBYUSERNAME_LOGS_ERROR,\n    error: error,\n    message: message,\n    status: status,\n    path: path\n  };\n}\n\nfunction findLogsByUserNameAction(search) {\n  return function (dispatch) {\n    dispatch(findByUserNameBegin());\n    return requester.get('/logs/findByUserName/' + search, function (response) {\n      if (response.error) {\n        var error = response.error,\n            message = response.message,\n            status = response.status,\n            path = response.path;\n        dispatch(findByUserNameError(error, message, status, path));\n      } else {\n        dispatch(fetchAllLogsSuccess(response));\n        dispatch(findByUserNameSuccess(response, search));\n      }\n    }).catch(function (err) {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n\n      dispatch(findByUserNameError('', \"Error: \".concat(err.message), err.status, ''));\n    });\n  };\n}\n\n; // clearByUserName\n\nfunction clearByUserNameSuccess(response) {\n  return {\n    type: CLEARBYUSERNAME_LOGS_SUCCESS,\n    payload: response\n  };\n}\n\nfunction clearByUserNameBegin() {\n  return {\n    type: CLEARBYUSERNAME_LOGS_BEGIN\n  };\n}\n\nfunction clearByUserNameError(error, message, status, path) {\n  return {\n    type: CLEARBYUSERNAME_LOGS_ERROR,\n    error: error,\n    message: message,\n    status: status,\n    path: path\n  };\n}\n\nfunction clearLogsByUserNameAction(selected) {\n  return function (dispatch) {\n    dispatch(clearByUserNameBegin());\n    return requester.delete('/logs/clearByName/' + selected, {}, function (response) {\n      if (response.error) {\n        var error = response.error,\n            message = response.message,\n            status = response.status,\n            path = response.path;\n        dispatch(clearByUserNameError(error, message, status, path));\n      } else {\n        dispatch(clearByUserNameSuccess(response));\n        dispatch(fetchAllLogsAction());\n      }\n    }).catch(function (err) {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n\n      dispatch(clearByUserNameError('', \"Error: \".concat(err.message), err.status, ''));\n    });\n  };\n}\n\n; // clearAllLogs\n\nfunction clearAllLogsSuccess(response) {\n  return {\n    type: CLEAR_ALL_LOGS_SUCCESS,\n    payload: response\n  };\n}\n\nfunction clearAllLogsBegin() {\n  return {\n    type: CLEAR_ALL_LOGS_BEGIN\n  };\n}\n\nfunction clearAllLogsError(error, message, status, path) {\n  return {\n    type: CLEAR_ALL_LOGS_ERROR,\n    error: error,\n    message: message,\n    status: status,\n    path: path\n  };\n}\n\nfunction clearAllLogsAction() {\n  return function (dispatch) {\n    dispatch(clearAllLogsBegin());\n    return requester.delete('/logs/clear', {}, function (response) {\n      if (response.error) {\n        var error = response.error,\n            message = response.message,\n            status = response.status,\n            path = response.path;\n        dispatch(clearAllLogsError(error, message, status, path));\n      } else {\n        dispatch(clearAllLogsSuccess(response));\n      }\n    }).catch(function (err) {\n      if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\n        localStorage.clear();\n      }\n\n      dispatch(clearAllLogsError('', \"Error: \".concat(err.message), err.status, ''));\n    });\n  };\n}\n\n;\nexport { fetchAllLogsAction, findLogsByUserNameAction, clearLogsByUserNameAction, clearAllLogsAction };","map":{"version":3,"sources":["D:\\SocialNetWork\\Social-Network\\SocialNetwork\\Client\\src\\store\\actions\\logsActions.js"],"names":["requester","FETCH_ALL_LOGS_SUCCESS","FETCH_ALL_LOGS_BEGIN","FETCH_ALL_LOGS_ERROR","FINDBYUSERNAME_LOGS_SUCCESS","FINDBYUSERNAME_LOGS_BEGIN","FINDBYUSERNAME_LOGS_ERROR","CLEARBYUSERNAME_LOGS_SUCCESS","CLEARBYUSERNAME_LOGS_BEGIN","CLEARBYUSERNAME_LOGS_ERROR","CLEAR_ALL_LOGS_SUCCESS","CLEAR_ALL_LOGS_BEGIN","CLEAR_ALL_LOGS_ERROR","fetchAllLogsSuccess","response","type","payload","fetchAllLogsBegin","fetchAllLogsError","error","message","status","path","fetchAllLogsAction","dispatch","get","catch","err","localStorage","clear","findByUserNameSuccess","search","findByUserNameBegin","findByUserNameError","findLogsByUserNameAction","clearByUserNameSuccess","clearByUserNameBegin","clearByUserNameError","clearLogsByUserNameAction","selected","delete","clearAllLogsSuccess","clearAllLogsBegin","clearAllLogsError","clearAllLogsAction"],"mappings":"AAAA,SAASA,SAAT,QAA0B,sBAA1B;AACA,SACIC,sBADJ,EAC4BC,oBAD5B,EACkDC,oBADlD,EAEIC,2BAFJ,EAEiCC,yBAFjC,EAE4DC,yBAF5D,EAGIC,4BAHJ,EAGkCC,0BAHlC,EAG8DC,0BAH9D,EAIIC,sBAJJ,EAI4BC,oBAJ5B,EAIkDC,oBAJlD,QAKO,eALP,C,CAOA;;AACA,SAASC,mBAAT,CAA6BC,QAA7B,EAAuC;AACnC,SAAO;AACHC,IAAAA,IAAI,EAAEd,sBADH;AAEHe,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH;;AAED,SAASG,iBAAT,GAA6B;AACzB,SAAO;AACHF,IAAAA,IAAI,EAAEb;AADH,GAAP;AAGH;;AAED,SAASgB,iBAAT,CAA2BC,KAA3B,EAAkCC,OAAlC,EAA2CC,MAA3C,EAAmDC,IAAnD,EAAyD;AACrD,SAAO;AACHP,IAAAA,IAAI,EAAEZ,oBADH;AAEHgB,IAAAA,KAAK,EAALA,KAFG;AAGHC,IAAAA,OAAO,EAAPA,OAHG;AAIHC,IAAAA,MAAM,EAANA,MAJG;AAKHC,IAAAA,IAAI,EAAJA;AALG,GAAP;AAOH;;AAED,SAASC,kBAAT,GAA8B;AAC1B,SAAO,UAACC,QAAD,EAAc;AACjBA,IAAAA,QAAQ,CAACP,iBAAiB,EAAlB,CAAR;AACA,WAAOjB,SAAS,CAACyB,GAAV,CAAc,WAAd,EAA2B,UAACX,QAAD,EAAc;AAC5C,UAAIA,QAAQ,CAACK,KAAb,EAAoB;AAAA,YACRA,KADQ,GACyBL,QADzB,CACRK,KADQ;AAAA,YACDC,OADC,GACyBN,QADzB,CACDM,OADC;AAAA,YACQC,MADR,GACyBP,QADzB,CACQO,MADR;AAAA,YACgBC,IADhB,GACyBR,QADzB,CACgBQ,IADhB;AAEhBE,QAAAA,QAAQ,CAACN,iBAAiB,CAACC,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAAyBC,IAAzB,CAAlB,CAAR;AACH,OAHD,MAGO;AACH;AACAE,QAAAA,QAAQ,CAACX,mBAAmB,CAACC,QAAD,CAApB,CAAR;AACH;AACJ,KARM,EAQJY,KARI,CAQE,UAAAC,GAAG,EAAI;AACZ,UAAIA,GAAG,CAACN,MAAJ,KAAe,GAAf,IAAsBM,GAAG,CAACP,OAAJ,KAAgB,2CAA1C,EAAuF;AACnFQ,QAAAA,YAAY,CAACC,KAAb;AACH;;AACDL,MAAAA,QAAQ,CAACN,iBAAiB,CAAC,EAAD,mBAAeS,GAAG,CAACP,OAAnB,GAA8BO,GAAG,CAACN,MAAlC,EAA0C,EAA1C,CAAlB,CAAR;AACH,KAbM,CAAP;AAcH,GAhBD;AAiBH;;AAAA,C,CAED;;AACA,SAASS,qBAAT,CAA+BhB,QAA/B,EAAyCiB,MAAzC,EAAiD;AAC7C,SAAO;AACHhB,IAAAA,IAAI,EAAEX,2BADH;AAEHY,IAAAA,OAAO,EAAEF,QAFN;AAGHM,IAAAA,OAAO,2CAAmCW,MAAnC;AAHJ,GAAP;AAKH;;AAED,SAASC,mBAAT,GAA+B;AAC3B,SAAO;AACHjB,IAAAA,IAAI,EAAEV;AADH,GAAP;AAGH;;AAED,SAAS4B,mBAAT,CAA6Bd,KAA7B,EAAoCC,OAApC,EAA6CC,MAA7C,EAAqDC,IAArD,EAA2D;AACvD,SAAO;AACHP,IAAAA,IAAI,EAAET,yBADH;AAEHa,IAAAA,KAAK,EAALA,KAFG;AAGHC,IAAAA,OAAO,EAAPA,OAHG;AAIHC,IAAAA,MAAM,EAANA,MAJG;AAKHC,IAAAA,IAAI,EAAJA;AALG,GAAP;AAOH;;AAED,SAASY,wBAAT,CAAkCH,MAAlC,EAA0C;AACtC,SAAO,UAACP,QAAD,EAAc;AACjBA,IAAAA,QAAQ,CAACQ,mBAAmB,EAApB,CAAR;AACA,WAAOhC,SAAS,CAACyB,GAAV,CAAc,0BAA0BM,MAAxC,EAAgD,UAACjB,QAAD,EAAc;AACjE,UAAIA,QAAQ,CAACK,KAAb,EAAoB;AAAA,YACRA,KADQ,GACyBL,QADzB,CACRK,KADQ;AAAA,YACDC,OADC,GACyBN,QADzB,CACDM,OADC;AAAA,YACQC,MADR,GACyBP,QADzB,CACQO,MADR;AAAA,YACgBC,IADhB,GACyBR,QADzB,CACgBQ,IADhB;AAEhBE,QAAAA,QAAQ,CAACS,mBAAmB,CAACd,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAAyBC,IAAzB,CAApB,CAAR;AACH,OAHD,MAGO;AACHE,QAAAA,QAAQ,CAACX,mBAAmB,CAACC,QAAD,CAApB,CAAR;AACAU,QAAAA,QAAQ,CAACM,qBAAqB,CAAChB,QAAD,EAAWiB,MAAX,CAAtB,CAAR;AACH;AACJ,KARM,EAQJL,KARI,CAQE,UAAAC,GAAG,EAAI;AACZ,UAAIA,GAAG,CAACN,MAAJ,KAAe,GAAf,IAAsBM,GAAG,CAACP,OAAJ,KAAgB,2CAA1C,EAAuF;AACnFQ,QAAAA,YAAY,CAACC,KAAb;AACH;;AACDL,MAAAA,QAAQ,CAACS,mBAAmB,CAAC,EAAD,mBAAeN,GAAG,CAACP,OAAnB,GAA8BO,GAAG,CAACN,MAAlC,EAA0C,EAA1C,CAApB,CAAR;AACH,KAbM,CAAP;AAcH,GAhBD;AAiBH;;AAAA,C,CAED;;AACA,SAASc,sBAAT,CAAgCrB,QAAhC,EAA0C;AACtC,SAAO;AACHC,IAAAA,IAAI,EAAER,4BADH;AAEHS,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH;;AAED,SAASsB,oBAAT,GAAgC;AAC5B,SAAO;AACHrB,IAAAA,IAAI,EAAEP;AADH,GAAP;AAGH;;AAED,SAAS6B,oBAAT,CAA8BlB,KAA9B,EAAqCC,OAArC,EAA8CC,MAA9C,EAAsDC,IAAtD,EAA4D;AACxD,SAAO;AACHP,IAAAA,IAAI,EAAEN,0BADH;AAEHU,IAAAA,KAAK,EAALA,KAFG;AAGHC,IAAAA,OAAO,EAAPA,OAHG;AAIHC,IAAAA,MAAM,EAANA,MAJG;AAKHC,IAAAA,IAAI,EAAJA;AALG,GAAP;AAOH;;AAED,SAASgB,yBAAT,CAAmCC,QAAnC,EAA6C;AACzC,SAAO,UAACf,QAAD,EAAc;AACjBA,IAAAA,QAAQ,CAACY,oBAAoB,EAArB,CAAR;AACA,WAAOpC,SAAS,CAACwC,MAAV,CAAiB,uBAAuBD,QAAxC,EAAkD,EAAlD,EAAsD,UAACzB,QAAD,EAAc;AACvE,UAAIA,QAAQ,CAACK,KAAb,EAAoB;AAAA,YACRA,KADQ,GACyBL,QADzB,CACRK,KADQ;AAAA,YACDC,OADC,GACyBN,QADzB,CACDM,OADC;AAAA,YACQC,MADR,GACyBP,QADzB,CACQO,MADR;AAAA,YACgBC,IADhB,GACyBR,QADzB,CACgBQ,IADhB;AAEhBE,QAAAA,QAAQ,CAACa,oBAAoB,CAAClB,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAAyBC,IAAzB,CAArB,CAAR;AACH,OAHD,MAGO;AACHE,QAAAA,QAAQ,CAACW,sBAAsB,CAACrB,QAAD,CAAvB,CAAR;AACAU,QAAAA,QAAQ,CAACD,kBAAkB,EAAnB,CAAR;AACH;AACJ,KARM,EAQJG,KARI,CAQE,UAAAC,GAAG,EAAI;AACZ,UAAIA,GAAG,CAACN,MAAJ,KAAe,GAAf,IAAsBM,GAAG,CAACP,OAAJ,KAAgB,2CAA1C,EAAuF;AACnFQ,QAAAA,YAAY,CAACC,KAAb;AACH;;AACDL,MAAAA,QAAQ,CAACa,oBAAoB,CAAC,EAAD,mBAAeV,GAAG,CAACP,OAAnB,GAA8BO,GAAG,CAACN,MAAlC,EAA0C,EAA1C,CAArB,CAAR;AACH,KAbM,CAAP;AAcH,GAhBD;AAiBH;;AAAA,C,CAED;;AACA,SAASoB,mBAAT,CAA6B3B,QAA7B,EAAuC;AACnC,SAAO;AACHC,IAAAA,IAAI,EAAEL,sBADH;AAEHM,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH;;AAED,SAAS4B,iBAAT,GAA6B;AACzB,SAAO;AACH3B,IAAAA,IAAI,EAAEJ;AADH,GAAP;AAGH;;AAED,SAASgC,iBAAT,CAA2BxB,KAA3B,EAAkCC,OAAlC,EAA2CC,MAA3C,EAAmDC,IAAnD,EAAyD;AACrD,SAAO;AACHP,IAAAA,IAAI,EAAEH,oBADH;AAEHO,IAAAA,KAAK,EAALA,KAFG;AAGHC,IAAAA,OAAO,EAAPA,OAHG;AAIHC,IAAAA,MAAM,EAANA,MAJG;AAKHC,IAAAA,IAAI,EAAJA;AALG,GAAP;AAOH;;AAED,SAASsB,kBAAT,GAA8B;AAC1B,SAAO,UAACpB,QAAD,EAAc;AACjBA,IAAAA,QAAQ,CAACkB,iBAAiB,EAAlB,CAAR;AACA,WAAO1C,SAAS,CAACwC,MAAV,CAAiB,aAAjB,EAAgC,EAAhC,EAAoC,UAAC1B,QAAD,EAAc;AACrD,UAAIA,QAAQ,CAACK,KAAb,EAAoB;AAAA,YACRA,KADQ,GACyBL,QADzB,CACRK,KADQ;AAAA,YACDC,OADC,GACyBN,QADzB,CACDM,OADC;AAAA,YACQC,MADR,GACyBP,QADzB,CACQO,MADR;AAAA,YACgBC,IADhB,GACyBR,QADzB,CACgBQ,IADhB;AAEhBE,QAAAA,QAAQ,CAACmB,iBAAiB,CAACxB,KAAD,EAAQC,OAAR,EAAiBC,MAAjB,EAAyBC,IAAzB,CAAlB,CAAR;AACH,OAHD,MAGO;AACHE,QAAAA,QAAQ,CAACiB,mBAAmB,CAAC3B,QAAD,CAApB,CAAR;AACH;AACJ,KAPM,EAOJY,KAPI,CAOE,UAAAC,GAAG,EAAI;AACZ,UAAIA,GAAG,CAACN,MAAJ,KAAe,GAAf,IAAsBM,GAAG,CAACP,OAAJ,KAAgB,2CAA1C,EAAuF;AACnFQ,QAAAA,YAAY,CAACC,KAAb;AACH;;AACDL,MAAAA,QAAQ,CAACmB,iBAAiB,CAAC,EAAD,mBAAehB,GAAG,CAACP,OAAnB,GAA8BO,GAAG,CAACN,MAAlC,EAA0C,EAA1C,CAAlB,CAAR;AACH,KAZM,CAAP;AAaH,GAfD;AAgBH;;AAAA;AAED,SAASE,kBAAT,EAA6BW,wBAA7B,EAAuDI,yBAAvD,EAAkFM,kBAAlF","sourcesContent":["import { requester } from '../../infrastructure';\r\nimport {\r\n    FETCH_ALL_LOGS_SUCCESS, FETCH_ALL_LOGS_BEGIN, FETCH_ALL_LOGS_ERROR,\r\n    FINDBYUSERNAME_LOGS_SUCCESS, FINDBYUSERNAME_LOGS_BEGIN, FINDBYUSERNAME_LOGS_ERROR,\r\n    CLEARBYUSERNAME_LOGS_SUCCESS, CLEARBYUSERNAME_LOGS_BEGIN, CLEARBYUSERNAME_LOGS_ERROR,\r\n    CLEAR_ALL_LOGS_SUCCESS, CLEAR_ALL_LOGS_BEGIN, CLEAR_ALL_LOGS_ERROR,\r\n} from './actionTypes';\r\n\r\n// fetchAllLogs\r\nfunction fetchAllLogsSuccess(response) {\r\n    return {\r\n        type: FETCH_ALL_LOGS_SUCCESS,\r\n        payload: response\r\n    }\r\n}\r\n\r\nfunction fetchAllLogsBegin() {\r\n    return {\r\n        type: FETCH_ALL_LOGS_BEGIN,\r\n    }\r\n}\r\n\r\nfunction fetchAllLogsError(error, message, status, path) {\r\n    return {\r\n        type: FETCH_ALL_LOGS_ERROR,\r\n        error,\r\n        message,\r\n        status,\r\n        path,\r\n    }\r\n}\r\n\r\nfunction fetchAllLogsAction() {\r\n    return (dispatch) => {\r\n        dispatch(fetchAllLogsBegin())\r\n        return requester.get('/logs/all', (response) => {\r\n            if (response.error) {\r\n                const { error, message, status, path } = response;\r\n                dispatch(fetchAllLogsError(error, message, status, path));\r\n            } else {\r\n                // dispatch(changeAllPicturesAction(timeLineUserId));\r\n                dispatch(fetchAllLogsSuccess(response));\r\n            }\r\n        }).catch(err => {\r\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\r\n                localStorage.clear();\r\n            }\r\n            dispatch(fetchAllLogsError('', `Error: ${err.message}`, err.status, ''));\r\n        })\r\n    }\r\n};\r\n\r\n// findByUserName\r\nfunction findByUserNameSuccess(response, search) {\r\n    return {\r\n        type: FINDBYUSERNAME_LOGS_SUCCESS,\r\n        payload: response,\r\n        message: `Successfully loaded logs for \"${search}\".`\r\n    }\r\n}\r\n\r\nfunction findByUserNameBegin() {\r\n    return {\r\n        type: FINDBYUSERNAME_LOGS_BEGIN,\r\n    }\r\n}\r\n\r\nfunction findByUserNameError(error, message, status, path) {\r\n    return {\r\n        type: FINDBYUSERNAME_LOGS_ERROR,\r\n        error,\r\n        message,\r\n        status,\r\n        path,\r\n    }\r\n}\r\n\r\nfunction findLogsByUserNameAction(search) {\r\n    return (dispatch) => {\r\n        dispatch(findByUserNameBegin())\r\n        return requester.get('/logs/findByUserName/' + search, (response) => {\r\n            if (response.error) {\r\n                const { error, message, status, path } = response;\r\n                dispatch(findByUserNameError(error, message, status, path));\r\n            } else {\r\n                dispatch(fetchAllLogsSuccess(response));\r\n                dispatch(findByUserNameSuccess(response, search));\r\n            }\r\n        }).catch(err => {\r\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\r\n                localStorage.clear();\r\n            }\r\n            dispatch(findByUserNameError('', `Error: ${err.message}`, err.status, ''));\r\n        })\r\n    }\r\n};\r\n\r\n// clearByUserName\r\nfunction clearByUserNameSuccess(response) {\r\n    return {\r\n        type: CLEARBYUSERNAME_LOGS_SUCCESS,\r\n        payload: response,\r\n    }\r\n}\r\n\r\nfunction clearByUserNameBegin() {\r\n    return {\r\n        type: CLEARBYUSERNAME_LOGS_BEGIN,\r\n    }\r\n}\r\n\r\nfunction clearByUserNameError(error, message, status, path) {\r\n    return {\r\n        type: CLEARBYUSERNAME_LOGS_ERROR,\r\n        error,\r\n        message,\r\n        status,\r\n        path,\r\n    }\r\n}\r\n\r\nfunction clearLogsByUserNameAction(selected) {\r\n    return (dispatch) => {\r\n        dispatch(clearByUserNameBegin())\r\n        return requester.delete('/logs/clearByName/' + selected, {}, (response) => {\r\n            if (response.error) {\r\n                const { error, message, status, path } = response;\r\n                dispatch(clearByUserNameError(error, message, status, path));\r\n            } else {\r\n                dispatch(clearByUserNameSuccess(response));\r\n                dispatch(fetchAllLogsAction());\r\n            }\r\n        }).catch(err => {\r\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\r\n                localStorage.clear();\r\n            }\r\n            dispatch(clearByUserNameError('', `Error: ${err.message}`, err.status, ''));\r\n        })\r\n    }\r\n};\r\n\r\n// clearAllLogs\r\nfunction clearAllLogsSuccess(response) {\r\n    return {\r\n        type: CLEAR_ALL_LOGS_SUCCESS,\r\n        payload: response,\r\n    }\r\n}\r\n\r\nfunction clearAllLogsBegin() {\r\n    return {\r\n        type: CLEAR_ALL_LOGS_BEGIN,\r\n    }\r\n}\r\n\r\nfunction clearAllLogsError(error, message, status, path) {\r\n    return {\r\n        type: CLEAR_ALL_LOGS_ERROR,\r\n        error,\r\n        message,\r\n        status,\r\n        path,\r\n    }\r\n}\r\n\r\nfunction clearAllLogsAction() {\r\n    return (dispatch) => {\r\n        dispatch(clearAllLogsBegin())\r\n        return requester.delete('/logs/clear', {}, (response) => {\r\n            if (response.error) {\r\n                const { error, message, status, path } = response;\r\n                dispatch(clearAllLogsError(error, message, status, path));\r\n            } else {\r\n                dispatch(clearAllLogsSuccess(response));\r\n            }\r\n        }).catch(err => {\r\n            if (err.status === 403 && err.message === 'Your JWT token is expired. Please log in!') {\r\n                localStorage.clear();\r\n            }\r\n            dispatch(clearAllLogsError('', `Error: ${err.message}`, err.status, ''));\r\n        })\r\n    }\r\n};\r\n\r\nexport { fetchAllLogsAction, findLogsByUserNameAction, clearLogsByUserNameAction, clearAllLogsAction };"]},"metadata":{},"sourceType":"module"}